// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: src/proto/topup/topup.proto

package topup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TopUpServiceClient is the client API for TopUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopUpServiceClient interface {
	Form(ctx context.Context, in *FormRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	Inquiry(ctx context.Context, in *InquiryRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	Payment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
}

type topUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopUpServiceClient(cc grpc.ClientConnInterface) TopUpServiceClient {
	return &topUpServiceClient{cc}
}

func (c *topUpServiceClient) Form(ctx context.Context, in *FormRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/micro_topup.TopUpService/Form", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topUpServiceClient) Inquiry(ctx context.Context, in *InquiryRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/micro_topup.TopUpService/Inquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topUpServiceClient) Payment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, "/micro_topup.TopUpService/Payment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopUpServiceServer is the server API for TopUpService service.
// All implementations must embed UnimplementedTopUpServiceServer
// for forward compatibility
type TopUpServiceServer interface {
	Form(context.Context, *FormRequest) (*GeneralResponse, error)
	Inquiry(context.Context, *InquiryRequest) (*GeneralResponse, error)
	Payment(context.Context, *PaymentRequest) (*GeneralResponse, error)
	mustEmbedUnimplementedTopUpServiceServer()
}

// UnimplementedTopUpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTopUpServiceServer struct {
}

func (UnimplementedTopUpServiceServer) Form(context.Context, *FormRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Form not implemented")
}
func (UnimplementedTopUpServiceServer) Inquiry(context.Context, *InquiryRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inquiry not implemented")
}
func (UnimplementedTopUpServiceServer) Payment(context.Context, *PaymentRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payment not implemented")
}
func (UnimplementedTopUpServiceServer) mustEmbedUnimplementedTopUpServiceServer() {}

// UnsafeTopUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopUpServiceServer will
// result in compilation errors.
type UnsafeTopUpServiceServer interface {
	mustEmbedUnimplementedTopUpServiceServer()
}

func RegisterTopUpServiceServer(s grpc.ServiceRegistrar, srv TopUpServiceServer) {
	s.RegisterService(&TopUpService_ServiceDesc, srv)
}

func _TopUpService_Form_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopUpServiceServer).Form(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro_topup.TopUpService/Form",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopUpServiceServer).Form(ctx, req.(*FormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopUpService_Inquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopUpServiceServer).Inquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro_topup.TopUpService/Inquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopUpServiceServer).Inquiry(ctx, req.(*InquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopUpService_Payment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopUpServiceServer).Payment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/micro_topup.TopUpService/Payment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopUpServiceServer).Payment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopUpService_ServiceDesc is the grpc.ServiceDesc for TopUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micro_topup.TopUpService",
	HandlerType: (*TopUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Form",
			Handler:    _TopUpService_Form_Handler,
		},
		{
			MethodName: "Inquiry",
			Handler:    _TopUpService_Inquiry_Handler,
		},
		{
			MethodName: "Payment",
			Handler:    _TopUpService_Payment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/topup/topup.proto",
}
