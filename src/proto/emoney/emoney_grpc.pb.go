// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: src/proto/emoney/emoney.proto

package emoney

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmoneyServiceClient is the client API for EmoneyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmoneyServiceClient interface {
	GetWalletProfile(ctx context.Context, in *GetWalletProfileRequest, opts ...grpc.CallOption) (*GetWalletProfileResponse, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error)
	InsertTransaction(ctx context.Context, in *InsertTransactionHistoryRequest, opts ...grpc.CallOption) (*InsertTransactionHistoryResponse, error)
}

type emoneyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmoneyServiceClient(cc grpc.ClientConnInterface) EmoneyServiceClient {
	return &emoneyServiceClient{cc}
}

func (c *emoneyServiceClient) GetWalletProfile(ctx context.Context, in *GetWalletProfileRequest, opts ...grpc.CallOption) (*GetWalletProfileResponse, error) {
	out := new(GetWalletProfileResponse)
	err := c.cc.Invoke(ctx, "/emoney.EmoneyService/GetWalletProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emoneyServiceClient) GetWalletInfo(ctx context.Context, in *GetWalletInfoRequest, opts ...grpc.CallOption) (*GetWalletInfoResponse, error) {
	out := new(GetWalletInfoResponse)
	err := c.cc.Invoke(ctx, "/emoney.EmoneyService/GetWalletInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emoneyServiceClient) InsertTransaction(ctx context.Context, in *InsertTransactionHistoryRequest, opts ...grpc.CallOption) (*InsertTransactionHistoryResponse, error) {
	out := new(InsertTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, "/emoney.EmoneyService/InsertTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmoneyServiceServer is the server API for EmoneyService service.
// All implementations must embed UnimplementedEmoneyServiceServer
// for forward compatibility
type EmoneyServiceServer interface {
	GetWalletProfile(context.Context, *GetWalletProfileRequest) (*GetWalletProfileResponse, error)
	GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error)
	InsertTransaction(context.Context, *InsertTransactionHistoryRequest) (*InsertTransactionHistoryResponse, error)
	mustEmbedUnimplementedEmoneyServiceServer()
}

// UnimplementedEmoneyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmoneyServiceServer struct {
}

func (UnimplementedEmoneyServiceServer) GetWalletProfile(context.Context, *GetWalletProfileRequest) (*GetWalletProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletProfile not implemented")
}
func (UnimplementedEmoneyServiceServer) GetWalletInfo(context.Context, *GetWalletInfoRequest) (*GetWalletInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}
func (UnimplementedEmoneyServiceServer) InsertTransaction(context.Context, *InsertTransactionHistoryRequest) (*InsertTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTransaction not implemented")
}
func (UnimplementedEmoneyServiceServer) mustEmbedUnimplementedEmoneyServiceServer() {}

// UnsafeEmoneyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmoneyServiceServer will
// result in compilation errors.
type UnsafeEmoneyServiceServer interface {
	mustEmbedUnimplementedEmoneyServiceServer()
}

func RegisterEmoneyServiceServer(s grpc.ServiceRegistrar, srv EmoneyServiceServer) {
	s.RegisterService(&EmoneyService_ServiceDesc, srv)
}

func _EmoneyService_GetWalletProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoneyServiceServer).GetWalletProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emoney.EmoneyService/GetWalletProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoneyServiceServer).GetWalletProfile(ctx, req.(*GetWalletProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmoneyService_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoneyServiceServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emoney.EmoneyService/GetWalletInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoneyServiceServer).GetWalletInfo(ctx, req.(*GetWalletInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmoneyService_InsertTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoneyServiceServer).InsertTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emoney.EmoneyService/InsertTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoneyServiceServer).InsertTransaction(ctx, req.(*InsertTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmoneyService_ServiceDesc is the grpc.ServiceDesc for EmoneyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmoneyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emoney.EmoneyService",
	HandlerType: (*EmoneyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWalletProfile",
			Handler:    _EmoneyService_GetWalletProfile_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _EmoneyService_GetWalletInfo_Handler,
		},
		{
			MethodName: "InsertTransaction",
			Handler:    _EmoneyService_InsertTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/emoney/emoney.proto",
}
